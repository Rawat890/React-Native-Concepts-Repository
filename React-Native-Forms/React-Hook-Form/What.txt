It is a js library that is used to handle the form validation and submission like things
The main 2 things that it do is-
1. Manage the form state
2. Submission of the form
3. Validation of the form

useForm = This is a hook that is provided by the library that returns an object containing some properties. It is a custom hook that is used for managing the forms with ease. It takes one object as optional argument.

const form  = useForm() //This line will create a form variable that holds the object returned by useForm hook

const {register, control}=form()

1. register method helps the field to register within the react hook form so that it is available for the validation, and it can be tracked

2. handleSubmit method handles the form submission

3. React hook form does not re render on every keyStroke like the normal forms, which is great for performance

4. Form submission
   define function that will be called when the button is pressed
   destructure handleSubmit from form object
   onPress


Form Validation - This applies to form so that all the registered fields must obey some specific criteria like -pattern, min, max, minLength etc
1. Controller component is used
Used to wrap the custom components that are not inherently compatible with useForm, It is suitable when using third party libraries like Material UI, AntDesign
Acts as a bridge between the react hook form internal state and the custom inputs

control
This is an object returned by useForm that holds the internal state and methods for handling form data. We need to pass this control object to the Controller component to link it with the form state.

Must return the component from the render
render :({field:{onSubmit, OnBlur, value}})


What is field object

In react-hook-form, the Controller component is used to integrate controlled components (like TextInput) with the form management system. When you use Controller, it provides a field object that contains several properties to manage the input field's state.

The field object includes the following properties:

1. onChange:
This is a function that should be called when the value of the input field changes. It is responsible for updating the value in the form state. For example, when the user types in the input field, onChange is triggered to update the form's internal state with the new value.

Example:

javascript
Copy code
onChange(text) {
  // This will update the value in the form state
}
In the case of the Controller, you pass onChange to the TextInput's onChangeText prop (for React Native):

javascript
Copy code
<TextInput
  onChangeText={onChange}
  value={value}
/>
2. onBlur:
This is a function that is triggered when the input field loses focus (i.e., when the user clicks or taps outside of the input or switches to another input field). It is often used for validation purposes or to mark a field as "touched" once the user has interacted with it.

onBlur() {
  // Trigger validation or mark field as touched
}
In the Controller, it is typically passed to the TextInput's onBlur prop:
<TextInput
  onBlur={onBlur}
  value={value}
/>
3. value:
This represents the current value of the input field as stored in the form state. It is the value that the form keeps track of and updates whenever the user types in the field or when the field is programmatically updated.

Example:

javascript
Copy code
<TextInput
  value={value}
/>
The value prop is passed to the TextInput so that it reflects the form's state. Whenever the form state changes (via onChange), the value is updated to ensure the input field displays the latest value.

How They Work Together:
onChange updates the form state with the new value when the user types or interacts with the field.

onBlur helps track when the field has been interacted with and is often used to trigger validation or change the state of the form (e.g., marking a field as "touched").

value is the current form value for the field, which ensures that the input is always in sync with the form's state.

Putting it all together:
Hereâ€™s how these properties work together in the Controller component:

javascript
Copy code
<Controller
  control={control}
  name="userName"
  render={({ field: { onChange, onBlur, value } }) => (
    <TextInput
      style={styles.input}
      placeholder="Enter your username"
      onChangeText={onChange}  // updates form value when text changes
      onBlur={onBlur}          // triggers when input loses focus
      value={value}            // displays the current form value
    />
  )}
/>
Summary:
onChange: Updates the form state with the input value when it changes.

onBlur: Triggers when the field loses focus, often used for validation or marking the field as "touched."

value: The current value of the field, managed by react-hook-form's state, that keeps the input synchronized with the form.

These properties ensure that your form is controlled and that the input fields behave consistently with the form's state.


Validation Rules------->
Controller Component that is used to link the controlled components like input fields to the internal form state,
control -  object is returned by use form that is used to link Controller to the form state
rules - used to set validations and messages also, validate values here 
{errors.fieldName && <Text>{errors.fieldName.message}</Text>}

 rules={{
          required: 'Required !!',
          pattern: {
            value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
            message: 'Invalid Format'
          },
          validate: {
            notAdmin: (fieldValue) => {
              // Check if email is not "john@gmail.com"
              if (fieldValue !== 'john@gmail.com') {
                return 'Please enter admin email';
              }
              return true; // Email is valid
            }
          }
 }}




Array data -
1. set the array in defaultValues object
   phoneNumbers=["",""]
2. <Controller name:'phoneNumbers.0' render={}/>

Dynamic value -
useFieldArray hook - This hook is a powerful tool that allows you to dynamically add or remove fields in a form, making it easier to manage complex forms with multiple inputs. 
1.import the hook
2. add the property to default values i.e. array of objects
3. const {fields}=useFieldArray({
  name:'propertyName'
  control
})
4. Add jsx